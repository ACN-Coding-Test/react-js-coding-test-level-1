[{"C:\\Users\\Administrator\\Desktop\\react-js-coding-test-level-1\\src\\index.js":"1","C:\\Users\\Administrator\\Desktop\\react-js-coding-test-level-1\\src\\App.js":"2","C:\\Users\\Administrator\\Desktop\\react-js-coding-test-level-1\\src\\reportWebVitals.js":"3","C:\\Users\\Administrator\\Desktop\\react-js-coding-test-level-1\\src\\PokeDex.js":"4","C:\\Users\\Administrator\\Desktop\\react-js-coding-test-level-1\\src\\Home.js":"5","C:\\Users\\Administrator\\Desktop\\react-js-coding-test-level-1\\src\\Pagination.js":"6"},{"size":517,"mtime":1645990001978,"results":"7","hashOfConfig":"8"},{"size":387,"mtime":1645990001974,"results":"9","hashOfConfig":"8"},{"size":375,"mtime":1645990001978,"results":"10","hashOfConfig":"8"},{"size":5775,"mtime":1645990181994,"results":"11","hashOfConfig":"8"},{"size":1319,"mtime":1645990171976,"results":"12","hashOfConfig":"8"},{"size":2410,"mtime":1645990181994,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"z48u7c",{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"C:\\Users\\Administrator\\Desktop\\react-js-coding-test-level-1\\src\\index.js",[],"C:\\Users\\Administrator\\Desktop\\react-js-coding-test-level-1\\src\\App.js",["29"],"import \"./App.css\";\r\nimport Home from \"./Home\";\r\nimport { Route, NavLink, HashRouter } from \"react-router-dom\";\r\nimport PokeDex from \"./PokeDex\";\r\n\r\nfunction App() {\r\n  return (\r\n    <HashRouter>\r\n      <div>\r\n        <Route exact path=\"/\" component={Home}/>\r\n        <Route path=\"/pokedex\" component={PokeDex}/>\r\n      </div>\r\n      \r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Administrator\\Desktop\\react-js-coding-test-level-1\\src\\reportWebVitals.js",[],"C:\\Users\\Administrator\\Desktop\\react-js-coding-test-level-1\\src\\PokeDex.js",["30"],"import \"./App.css\";\r\nimport { useState, useEffect, createRef } from \"react\";\r\nimport ReactLoading from \"react-loading\";\r\nimport axios from \"axios\";\r\nimport Modal from \"react-modal\";\r\nimport ReactToPdf from 'react-to-pdf'\r\nimport { BarChart, Bar, XAxis, YAxis, Tooltip } from 'recharts';\r\nimport Pagination from \"./Pagination\";\r\n\r\n\r\nfunction PokeDex() {\r\n  const ref = createRef();\r\n  const [pokemons, setPokemons] = useState([]);\r\n  const [pokemonDetail, setPokemonDetail] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [query, setQuery] = useState(\"\");\r\n\r\n  const sortData = (e) => {\r\n    if (e.target.value === \"asd\") {\r\n      setPokemons([...pokemons].sort((a, b) => a.name > b.name ? 1 : -1))\r\n    }\r\n    else if (e.target.value === \"dsd\") {\r\n      setPokemons([...pokemons].sort((a, b) => b.name > a.name ? 1 : -1))\r\n    }\r\n  }\r\n\r\n  const showModel = async (url) => {\r\n    try {\r\n      setIsLoading(true);\r\n      const result = await axios.get(url);\r\n      const data = await result.data;\r\n      setPokemonDetail(data);\r\n      if (pokemonDetail) setIsLoading(false);\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n\r\n  const getPokedex = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      const result = await axios.get(\"https://pokeapi.co/api/v2/pokemon\");\r\n      const data = await result.data.results;\r\n      setPokemons(data);\r\n      if (pokemons) setIsLoading(false);\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    getPokedex();\r\n  }, [])\r\n\r\n  const customStyles = {\r\n    content: {\r\n      top: \"50%\",\r\n      left: \"50%\",\r\n      right: \"auto\",\r\n      bottom: \"auto\",\r\n      marginRight: \"-50%\",\r\n      transform: \"translate(-50%, -50%)\",\r\n      background: \"black\",\r\n      color: \"white\",\r\n    },\r\n    overlay: { backgroundColor: \"grey\" },\r\n  };\r\n\r\n  if (!isLoading && pokemons.length === 0) {\r\n    return (\r\n      <div>\r\n        <header className=\"App-header\">\r\n          <h1>Welcome to pokedex !</h1>\r\n          <h2>Requirement:</h2>\r\n          <ul>\r\n            <li>\r\n              Call this api:https://pokeapi.co/api/v2/pokemon to get pokedex, and show a list of pokemon name.\r\n            </li>\r\n            <li>Implement React Loading and show it during API call</li>\r\n            <li>when hover on the list item , change the item color to yellow.</li>\r\n            <li>when clicked the list item, show the modal below</li>\r\n            <li>\r\n              Add a search bar on top of the bar for searching, search will run\r\n              on keyup event\r\n            </li>\r\n            <li>Implement sorting and pagingation</li>\r\n            <li>Commit your codes after done</li>\r\n            <li>If you do more than expected (E.g redesign the page / create a chat feature at the bottom right). it would be good.</li>\r\n          </ul>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <header className=\"App-header\">\r\n        {isLoading ? (\r\n          <>\r\n            <div className=\"App\">\r\n              <header className=\"App-header\">\r\n                <ReactLoading />\r\n              </header>\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <div className=\"search-sort\">\r\n              <input type=\"search\" name=\"search\" placeholder=\"Search...\" onChange={e => setQuery(e.target.value)} />\r\n              <select onChange={sortData} name=\"sort\">\r\n                <option value=\"\">Sort</option>\r\n                <option value=\"asd\">ASD</option>\r\n                <option value=\"dsd\">DSD</option>\r\n              </select>\r\n            </div>\r\n            <h1>Welcome to pokedex !</h1>\r\n            <Pagination\r\n              data={pokemons}\r\n              query={query}\r\n              pageLimit={pokemons.length / 5}\r\n              dataLimit={5}\r\n              showModel={showModel}\r\n            />\r\n          </>\r\n        )}\r\n      </header>\r\n      {pokemonDetail && (\r\n        <Modal\r\n          isOpen={pokemonDetail ? true : false}\r\n          contentLabel={pokemonDetail?.name || \"\"}\r\n          ariaHideApp={false}\r\n          onRequestClose={() => {\r\n            setPokemonDetail(null);\r\n          }}\r\n          style={customStyles}\r\n        >\r\n          <div ref={ref}>\r\n            <img src={pokemonDetail.sprites.front_default} alt=\"\" />\r\n            <div className=\"flex\" >\r\n              <div>\r\n                <table>\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Base Stat</th>\r\n                      <th>Stat Name</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {pokemonDetail.stats.map(({ base_stat, stat }, index) => (\r\n                      <tr key={index}>\r\n                        <td>\r\n                          {base_stat}\r\n                        </td>\r\n                        <td>\r\n                          {stat.name}\r\n                        </td>\r\n                      </tr>\r\n                    ))}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n              <div>\r\n                <BarChart width={300} height={200}\r\n                  data={pokemonDetail.stats}\r\n                >\r\n                  <XAxis dataKey={\"stat.name\"} />\r\n                  <YAxis />\r\n                  <Tooltip />\r\n                  <Bar dataKey={\"base_stat\"} fill=\"#82ca9d\" />\r\n                </BarChart>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <ReactToPdf targetRef={ref} filename=\"pokemon.pdf\" x=\"35\">\r\n            {({ toPdf }) => (\r\n              <button className=\"pdf\" onClick={toPdf}>Generate pdf</button>\r\n            )}\r\n          </ReactToPdf>\r\n        </Modal>\r\n      )\r\n      }\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default PokeDex;\r\n","C:\\Users\\Administrator\\Desktop\\react-js-coding-test-level-1\\src\\Home.js",[],"C:\\Users\\Administrator\\Desktop\\react-js-coding-test-level-1\\src\\Pagination.js",["31"],"import React, { useState } from 'react';\r\nimport \"./App.css\";\r\n\r\nconst Pagination = ({ data, query, pageLimit, dataLimit, showModel }) => {\r\n    const [pages] = useState(Math.round(data.length / dataLimit));\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n\r\n    function goToNextPage() {\r\n        setCurrentPage((page) => page + 1);\r\n    }\r\n\r\n    function goToPreviousPage() {\r\n        setCurrentPage((page) => page - 1);\r\n    }\r\n\r\n    function changePage(event) {\r\n        const pageNumber = Number(event.target.textContent);\r\n        setCurrentPage(pageNumber);\r\n    }\r\n\r\n    const getPaginatedData = () => {\r\n        const startIndex = currentPage * dataLimit - dataLimit;\r\n        const endIndex = startIndex + dataLimit;\r\n        return data.slice(startIndex, endIndex);\r\n    };\r\n\r\n    const getPaginationGroup = () => {\r\n        let start = Math.floor((currentPage - 1) / pageLimit) * pageLimit;\r\n        return new Array(pageLimit).fill().map((_, idx) => start + idx + 1);\r\n    };\r\n\r\n    return (\r\n        <div className='container'>\r\n            {getPaginatedData().filter(poke => {\r\n                if (query === '') {\r\n                    return poke;\r\n                } else if (poke.name.toLowerCase().includes(query.toLowerCase())) {\r\n                    return poke;\r\n                }\r\n            }).map(({ name, url }, index) =>\r\n                <b className=\"pokemon\" key={index} onClick={() => showModel(url)}>{name}</b>\r\n            )}\r\n            <div className=\"pagination\">\r\n                <button\r\n                    onClick={goToPreviousPage}\r\n                    className={`prev ${currentPage === 1 ? 'disabled' : ''}`}\r\n                >\r\n                    prev\r\n                </button>\r\n\r\n                {getPaginationGroup().map((item, index) => (\r\n                    <button\r\n                        key={index}\r\n                        onClick={changePage}\r\n                        className={`paginationItem ${currentPage === item ? 'active' : null}`}\r\n                    >\r\n                        {item}\r\n                    </button>\r\n                ))}\r\n\r\n                <button\r\n                    onClick={goToNextPage}\r\n                    className={`next ${currentPage === pages ? 'disabled' : ''}`}\r\n                >\r\n                    next\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pagination",{"ruleId":"32","severity":1,"message":"33","line":3,"column":17,"nodeType":"34","messageId":"35","endLine":3,"endColumn":24},{"ruleId":"36","severity":1,"message":"37","line":54,"column":6,"nodeType":"38","endLine":54,"endColumn":8,"suggestions":"39"},{"ruleId":"40","severity":1,"message":"41","line":34,"column":45,"nodeType":"42","messageId":"43","endLine":34,"endColumn":47},"no-unused-vars","'NavLink' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getPokedex'. Either include it or remove the dependency array.","ArrayExpression",["44"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",{"desc":"45","fix":"46"},"Update the dependencies array to be: [getPokedex]",{"range":"47","text":"48"},[1545,1547],"[getPokedex]"]